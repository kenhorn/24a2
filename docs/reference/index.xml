<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>24a2 on 24a2 - an ultra minimalist game engine</title>
    <link>http://24a2.routley.io/reference/</link>
    <description>Recent content in 24a2 on 24a2 - an ultra minimalist game engine</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="http://24a2.routley.io/reference/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Color</title>
      <link>http://24a2.routley.io/reference/enums/color/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://24a2.routley.io/reference/enums/color/</guid>
      <description>Color is a set of constants which you can use to set the color of dots.
Use it from both TypeScript and JavaScript with:
game.setDot(x, y, Color.Red)  Index Enumeration members  Black Blue Gray Green Indigo Orange Red Violet Yellow  Enumeration members Black • Black: = &amp;ldquo;BLACK&amp;rdquo;
Blue • Blue: = &amp;ldquo;BLUE&amp;rdquo;
Gray • Gray: = &amp;ldquo;GRAY&amp;rdquo;
Green • Green: = &amp;ldquo;GREEN&amp;rdquo;
Indigo • Indigo: = &amp;ldquo;INDIGO&amp;rdquo;</description>
    </item>
    
    <item>
      <title>Direction</title>
      <link>http://24a2.routley.io/reference/enums/direction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://24a2.routley.io/reference/enums/direction/</guid>
      <description>Index Enumeration members  Down Left Right Up  Enumeration members Down • Down: = &amp;ldquo;DOWN&amp;rdquo;
Left • Left: = &amp;ldquo;LEFT&amp;rdquo;
Right • Right: = &amp;ldquo;RIGHT&amp;rdquo;
Up • Up: = &amp;ldquo;UP&amp;rdquo;</description>
    </item>
    
    <item>
      <title>Game</title>
      <link>http://24a2.routley.io/reference/classes/game/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://24a2.routley.io/reference/classes/game/</guid>
      <description>Game is the object that controls the actual running of the game. You create a new one by passing in a GameConfig. Calling game.run() will start the game.
let config = { create: create, // A function you&amp;#39;ve defined  update: update, // A function you&amp;#39;ve defined } let game = new Game(config) game.run()  Hierarchy  Game  Index Constructors  constructor  Methods  end getDot getFrameCount run setDot setText  Constructors constructor + new Game(config: GameConfig): Game</description>
    </item>
    
    <item>
      <title>GameConfig</title>
      <link>http://24a2.routley.io/reference/interfaces/gameconfig/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://24a2.routley.io/reference/interfaces/gameconfig/</guid>
      <description>GameConfig is the object you pass when contructing a new Game.
Hierarchy  GameConfig  Index Properties  clearGrid containerId create defaultDotColor frameRate gridHeight gridWidth onDotClicked onKeyPress update  Properties Optional clearGrid • clearGrid? : undefined | false | true
Specifies whether 24a2 should clear the grid at the beginning of each frame. 24a2 clears the grid by setting the colour of every dot to GameConfig.defaultDotColor. Setting clearGrid to false lets you simplify the code for some games by letting 24a2 store the state for each dot.</description>
    </item>
    
  </channel>
</rss>